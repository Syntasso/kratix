// Code generated by counterfeiter. DO NOT EDIT.
package v1alpha1fakes

import (
	"sync"

	"github.com/syntasso/kratix/api/v1alpha1"
)

type FakePromiseFetcher struct {
	FromURLStub        func(string) (*v1alpha1.Promise, error)
	fromURLMutex       sync.RWMutex
	fromURLArgsForCall []struct {
		arg1 string
	}
	fromURLReturns struct {
		result1 *v1alpha1.Promise
		result2 error
	}
	fromURLReturnsOnCall map[int]struct {
		result1 *v1alpha1.Promise
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePromiseFetcher) FromURL(arg1 string) (*v1alpha1.Promise, error) {
	fake.fromURLMutex.Lock()
	ret, specificReturn := fake.fromURLReturnsOnCall[len(fake.fromURLArgsForCall)]
	fake.fromURLArgsForCall = append(fake.fromURLArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.FromURLStub
	fakeReturns := fake.fromURLReturns
	fake.recordInvocation("FromURL", []interface{}{arg1})
	fake.fromURLMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePromiseFetcher) FromURLCallCount() int {
	fake.fromURLMutex.RLock()
	defer fake.fromURLMutex.RUnlock()
	return len(fake.fromURLArgsForCall)
}

func (fake *FakePromiseFetcher) FromURLCalls(stub func(string) (*v1alpha1.Promise, error)) {
	fake.fromURLMutex.Lock()
	defer fake.fromURLMutex.Unlock()
	fake.FromURLStub = stub
}

func (fake *FakePromiseFetcher) FromURLArgsForCall(i int) string {
	fake.fromURLMutex.RLock()
	defer fake.fromURLMutex.RUnlock()
	argsForCall := fake.fromURLArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePromiseFetcher) FromURLReturns(result1 *v1alpha1.Promise, result2 error) {
	fake.fromURLMutex.Lock()
	defer fake.fromURLMutex.Unlock()
	fake.FromURLStub = nil
	fake.fromURLReturns = struct {
		result1 *v1alpha1.Promise
		result2 error
	}{result1, result2}
}

func (fake *FakePromiseFetcher) FromURLReturnsOnCall(i int, result1 *v1alpha1.Promise, result2 error) {
	fake.fromURLMutex.Lock()
	defer fake.fromURLMutex.Unlock()
	fake.FromURLStub = nil
	if fake.fromURLReturnsOnCall == nil {
		fake.fromURLReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.Promise
			result2 error
		})
	}
	fake.fromURLReturnsOnCall[i] = struct {
		result1 *v1alpha1.Promise
		result2 error
	}{result1, result2}
}

func (fake *FakePromiseFetcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fromURLMutex.RLock()
	defer fake.fromURLMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePromiseFetcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v1alpha1.PromiseFetcher = new(FakePromiseFetcher)
