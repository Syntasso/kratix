version: 2.1

orbs:
  k8s: circleci/kubernetes@1.3.1
  gh: circleci/github-cli@2.3.0
  golang: circleci/go@1.7.2
  retry: kimh/run-with-retry@1.0.0
  queue: eddiewebb/queue@2.2.1
  snyk: snyk/snyk@2.0.2
  slack: circleci/slack@3.4.2

executors:
  machine-medium:
    machine:
      image: ubuntu-2204:2023.04.2
      docker_layer_caching: true
    working_directory: ~/repo
    resource_class: medium
  machine-large:
    machine:
      image: ubuntu-2204:2023.04.2
      docker_layer_caching: true
    working_directory: ~/repo
    resource_class: large
  machine-xlarge:
    machine:
      image: ubuntu-2204:2023.04.2
      docker_layer_caching: true
    working_directory: ~/repo
    resource_class: xlarge

filter-for-tags: &filter-for-tags
  filters:
    tags:
      only: /^v.*/
    branches:
      ignore: /.*/

commands:
  notify-slack:
    description: Notify failures via Slack
    parameters:
      fail_only:
        type: boolean
        default: true
      only_for_branches:
        type: string
      success_message:
        type: string
        default: ':tada: A $CIRCLE_JOB job has succeeded!'
      failure_message:
        type: string
        default: ':red_circle: A $CIRCLE_JOB job has failed!'
      channel:
        type: string
        default: eng-chatter
    steps:
      - slack/status:
          webhook: ${SLACK_ENG_CHATTER}
          channel: << parameters.channel >>
          include_job_number_field: false
          include_project_field: false
          fail_only: << parameters.fail_only >>
          success_message: << parameters.success_message >>
          failure_message: << parameters.failure_message >>
          only_for_branches: << parameters.only_for_branches >>
  docker_login:
    steps:
      - run:
          # https://circleci.com/docs/building-docker-images/#run-docker-commands-using-the-machine-executor
          name: Docker Auth
          command: |
            echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USERNAME --password-stdin
  install_software:
    steps:
      - k8s/install-kubectl
      - golang/install:
          cache: true
          version: 1.21.5
      - run:
          name: Install Kind
          command: |
            if [ ! -f ~/bin/kind ]; then
              curl -L https://github.com/kubernetes-sigs/kind/releases/download/v0.20.0/kind-linux-amd64 -o ~/bin/kind
              chmod +x ~/bin/kind
            fi
      - run:
          name: Install Helm
          command: |
            curl -L https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz -o helm.tar.gz
            tar -xvf helm.tar.gz
            mv linux-amd64/helm ~/bin/helm
            chmod +x ~/bin/helm
            rm -rf linux-amd64/
            rm helm.tar.gz
      - run:
          name: Install yq
          command: |
            curl -L https://github.com/mikefarah/yq/releases/download/v4.34.1/yq_linux_amd64 -o yq
            mv yq ~/bin/yq
            chmod +x ~/bin/yq
      - run:
          name: Install Flux
          command: |
            curl -L https://github.com/fluxcd/flux2/releases/download/v0.41.2/flux_0.41.2_linux_amd64.tar.gz -o flux.tar.gz
            tar -xvf flux.tar.gz
            mv flux ~/bin/flux
            chmod +x ~/bin/flux
            rm flux.tar.gz
      - attach_workspace:
          at: .
      - run:
          name: Install Dependencies
          command: |
            go mod download

  configure_git:
    steps:
      - run:
          # see https://circleci.com/docs/github-integration#establish-the-authenticity-of-an-ssh-host
          name: setup git
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan github.com > ~/.ssh/known_hosts

            git config --global user.name "syntassodev"
            git config --global user.email "kratix@syntasso.io"

  setup_git:
    steps:
      - add_ssh_keys:
          # Add github deploy key
          # https://circleci.com/docs/github-integration#create-a-github-deploy-key
          fingerprints:
            - "5e:1e:ea:52:8b:1b:ad:a2:66:1a:40:98:a3:f5:96:f5" # deploy key for kratix
      - configure_git

  setup_git_helm:
    steps:
      - add_ssh_keys:
          fingerprints:
            - "4b:78:81:17:99:0c:1d:63:42:dc:bb:1f:bd:d6:54:a8" # deploy key for helm-charts
      - configure_git

jobs:
  clone-helm-charts:
    executor: machine-medium
    steps:
      - run:
          name: Clone helm charts
          command: |
            git clone --depth 1 git@github.com:syntasso/helm-charts.git ~/repo/charts
      - persist_to_workspace:
          root: .
          paths:
            - charts/

  clone-kratix:
    executor: machine-medium
    steps:
      - checkout
      - persist_to_workspace:
          root: .
          paths:
            - .

  kratix-security-scan:
    executor: machine-medium
    environment:
      KRATIX_IMAGE_NAME: syntasso/kratix-platform
      WORKER_IMAGE_NAME: syntasso/kratix-platform-pipeline-adapter
    steps:
      - snyk/scan:
          severity-threshold: high
          docker-image-name: $KRATIX_IMAGE_NAME:latest
      - snyk/scan:
          severity-threshold: high
          docker-image-name: $WORKER_IMAGE_NAME:latest
      - run:
          name: install govulncheck
          command: |
            set -o pipefail
            go install golang.org/x/vuln/cmd/govulncheck@latest
      - run:
          name: run check
          command: govulncheck ./...
      - snyk/scan:
          severity-threshold: high
      - notify-slack:
          only_for_branches: "main"
  test:
    executor: machine-xlarge
    steps:
      - install_software
      - run:
          name: Unit Tests
          command: |
            make test
      - run:
          name: System tests
          command: |
            DOCKER_BUILDKIT=1 ACK_GINKGO_RC=true make system-test

  e2e-demo-test-helm-git:
    executor: machine-large
    steps:
      - install_software
      - run:
          name: Create Destinations and helm install
          command: |
            make distribution
            ./charts/scripts/generate-templates-and-crds ./distribution/kratix.yaml
            export DOCKER_BUILDKIT=1

            # setup platform and install GitStateStore
            kind create cluster --image kindest/node:v1.27.3 --name platform --config hack/platform/kind-platform-config.yaml
            make install-cert-manager
            make build-and-load-kratix
            make build-and-load-worker-creator
            helm install kratix charts/kratix/ -f hack/platform/helm-values-gitea.yaml
            kubectl --context kind-platform apply --filename "hack/platform/gitea-install.yaml"
            kubectl --context kind-platform wait --for=condition=Ready --timeout=300s -n gitea pod -l app.kubernetes.io/instance=gitea

            # setup worker cluster and register as destination
            kind create cluster --image kindest/node:v1.27.3 --name worker --config hack/destination/kind-worker-config.yaml
            helm install kratix-destination charts/kratix-destination/ -f hack/destination/helm-values-gitea.yaml
            kubectl --context kind-worker wait --for=condition=Ready --timeout=300s -n default kustomization kratix-workload-resources
      - run:
          name: Verify Jenkins
          command: |
            ./scripts/install-jenkins.sh

  e2e-demo-test-helm-bucket:
    executor: machine-large
    steps:
      - install_software
      - run:
          name: Create Destinations and helm install
          command: |
            make distribution
            ./charts/scripts/generate-templates-and-crds ./distribution/kratix.yaml
            export DOCKER_BUILDKIT=1

            # setup platform and install BucketStateStore
            kind create cluster --image kindest/node:v1.27.3 --name platform --config hack/platform/kind-platform-config.yaml
            make install-cert-manager
            make build-and-load-kratix
            make build-and-load-worker-creator
            helm install kratix charts/kratix/ -f hack/platform/helm-values-minio.yaml
            kubectl --context kind-platform apply --filename "hack/platform/minio-install.yaml"
            kubectl --context kind-platform wait --for=condition=Ready --timeout=300s -n kratix-platform-system pod -l run=minio

            # setup worker cluster and register as destination
            kind create cluster --image kindest/node:v1.27.3 --name worker --config hack/destination/kind-worker-config.yaml
            helm install kratix-destination charts/kratix-destination/ -f hack/destination/helm-values-minio.yaml
            kubectl --context kind-platform apply --filename config/samples/platform_v1alpha1_worker.yaml
            kubectl --context kind-worker wait --for=condition=Ready --timeout=300s -n kratix-worker-config kustomization kratix-workload-resources
      - run:
          name: Verify Jenkins
          command: |
            ./scripts/install-jenkins.sh

  git-merge-and-push:
    executor: machine-medium
    steps:
      - install_software
      - setup_git
      - run:
          name: Merge dev to main
          command: |
            git checkout main
            git merge --no-ff --no-edit dev
            git push origin main

      - persist_to_workspace:
          root: .
          paths:
            - .

  generate-demo-image-list:
    executor: machine-large
    steps:
      - attach_workspace:
          at: .
      - install_software
      - run:
          name: Generate demo image list
          command: |
            cd ./demo/
            ./scripts/generate-demo-image-list.sh
      - persist_to_workspace:
          root: .
          paths:
            - .

  build-and-push-images:
    docker:
      - image: cimg/base:current
    resource_class: large
    parameters:
      image:
        type: string
    environment:
      VERSION: << pipeline.git.tag >>
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: 20.10.23
          docker_layer_caching: true
      - docker_login
      - run:
          name: Build and push images
          command: |
            ./scripts/build-images << parameters.image >>

  git-push-to-dev:
    executor: machine-medium
    steps:
      - attach_workspace:
          at: .
      - setup_git
      - run:
          name: Push dev
          command: |
            git add -f demo/
            # below command exits 0 when nothing is added
            git diff --cached --quiet && exit 0 || true
            git commit -m"update demo image list"
            git push origin dev

  generate-release-distribution:
    executor: machine-medium
    environment:
      VERSION: << pipeline.git.tag >>
    steps:
      - attach_workspace:
          at: .
      - install_software
      - run:
          name: Generate new distribution
          command: |
            ./scripts/make-distribution
      - run:
          name: Generate helm charts
          command: |
            ./charts/scripts/generate-templates-and-crds ./distribution/kratix.yaml
      - persist_to_workspace:
          root: .
          paths:
            - .

  tag-new-version:
    executor: machine-medium
    steps:
      - queue/until_front_of_line: # ensure only one of those runs at a time
          only-on-branch: main
          time: "5"
      - attach_workspace:
          at: .
      - setup_git
      - run:
          name: bump minor version and push tag
          command: |
            ./scripts/tag-new-version

  gh-release:
    docker:
      - image: cimg/base:current
    resource_class: large
    steps:
      - attach_workspace:
          at: .
      - gh/setup
      - run:
          name: Release
          command: |
            gh config set prompt disabled
            gh release create <<pipeline.git.tag>> --title <<pipeline.git.tag>> ./distribution/**/*.yaml ./distribution/*.yaml

  helm-release:
    docker:
      - image: cimg/base:current
    environment:
      VERSION: << pipeline.git.tag >>
    resource_class: large
    steps:
      - attach_workspace:
          at: .
      - setup_git_helm
      - run:
          name: Push to helm-charts
          command: |
            cd charts
            git add kratix/
            git diff --cached --quiet && exit 0 || true

            ./scripts/bump-minor kratix/
            git add kratix/
            git commit -m"update kratix package"
            git push origin main

workflows:
  run-ci:
    jobs:
      - clone-kratix
      - clone-helm-charts
      - test:
          requires: [clone-kratix, clone-helm-charts]
      - e2e-demo-test-helm-bucket:
          requires: [clone-kratix, clone-helm-charts]
      - e2e-demo-test-helm-git:
          requires: [clone-kratix, clone-helm-charts]
      ### ONLY DEV
      - git-merge-and-push:
          requires:
            - test
            - e2e-demo-test-helm-git
            - e2e-demo-test-helm-bucket
          filters:
            branches:
              only: dev
      ### END ONLY DEV
      ### ONLY MAIN
      - tag-new-version:
          requires:
            - test
            - e2e-demo-test-helm-git
            - e2e-demo-test-helm-bucket
          filters:
            branches:
              only: main
      ### END ONLY MAIN

  release:
    jobs:
      - clone-kratix:
          <<: *filter-for-tags
      - clone-helm-charts:
          <<: *filter-for-tags
      - build-and-push-images:
          <<: *filter-for-tags
          requires: [clone-kratix, clone-helm-charts]
          matrix:
            parameters:
              image: [kratix, work-creator, samples]
      - generate-release-distribution:
          <<: *filter-for-tags
          requires: [clone-kratix, clone-helm-charts]
      - helm-release:
          <<: *filter-for-tags
          requires: [build-and-push-images, generate-release-distribution]
      - gh-release:
          <<: *filter-for-tags
          requires: [build-and-push-images, generate-release-distribution]

  update-demo:
    triggers:
      - schedule:
          cron: "0 0 * * 1"
          filters:
            branches:
              only: [dev]
    jobs:
      - clone-kratix
      - generate-demo-image-list:
          requires: [clone-kratix]
      - git-push-to-dev:
          requires: [generate-demo-image-list]

  security-scan:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only: [main]
    jobs:
      - clone-kratix
      - kratix-security-scan:
          requires: [clone-kratix]

